import {
  _extends,
  _objectWithoutPropertiesLoose
} from "./chunk-IDRLHDO2.js";
import {
  es_default
} from "./chunk-PTPDQCAB.js";
import {
  require_react
} from "./chunk-VGQVIESM.js";
import {
  __toESM
} from "./chunk-TCQZMY3T.js";

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e, t) {
  if (null == e)
    return {};
  var o, r, i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++)
      o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

// node_modules/react-timecode/es/Timecode.js
var import_react = __toESM(require_react(), 1);

// node_modules/react-timecode/es/utils.js
var SECOND = 1e3;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var parseTime = function parseTime2(time) {
  var milliseconds = time;
  var hours = milliseconds >= HOUR ? Math.floor(milliseconds / HOUR) : 0;
  if (hours) {
    milliseconds -= hours * HOUR;
  }
  var minutes = milliseconds >= MINUTE ? Math.floor(milliseconds / MINUTE) : 0;
  if (minutes) {
    milliseconds -= minutes * MINUTE;
  }
  var seconds = milliseconds >= SECOND ? Math.floor(milliseconds / SECOND) : 0;
  if (seconds) {
    milliseconds -= seconds * SECOND;
  }
  return {
    hours,
    minutes,
    seconds,
    milliseconds
  };
};
var pad = function pad2(number) {
  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
  var numberLength = number.toString().length;
  if (numberLength < length) {
    var diff = length - numberLength;
    var padding = "";
    while (padding.length < diff) {
      padding += "0";
    }
    return "".concat(padding).concat(number);
  }
  return "".concat(number);
};
var formatMilliseconds = function formatMilliseconds2(milliseconds) {
  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;
  return pad((milliseconds / 1e3).toFixed(length) * 1e3, length);
};
var formatTimecode = function formatTimecode2(_ref) {
  var format = _ref.format, time = _ref.time;
  var _parseTime = parseTime(time), hours = _parseTime.hours, minutes = _parseTime.minutes, seconds = _parseTime.seconds, milliseconds = _parseTime.milliseconds;
  switch (format) {
    case "HH:mm:ss.SSS":
      return "".concat(pad(hours), ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case "H:mm:ss.SSS":
      return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case "H:?mm:ss.SSS":
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
      }
      return "".concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case "H:?m:ss.SSS":
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
      }
      return "".concat(minutes, ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case "HH:mm:ss":
      return "".concat(pad(hours), ":").concat(pad(minutes), ":").concat(pad(seconds));
    case "H:mm:ss":
      return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
    case "H:?mm:ss":
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
      }
      return "".concat(pad(minutes), ":").concat(pad(seconds));
    case "H:mm":
      return "".concat(hours, ":").concat(pad(minutes));
    case "s.SSS":
      return "".concat(seconds, ".").concat(formatMilliseconds(milliseconds));
    case "s.SS":
      return "".concat(seconds, ".").concat(formatMilliseconds(milliseconds, 2));
    case "mm:ss":
      return "".concat(pad(minutes + hours * 60), ":").concat(pad(seconds));
    case "H:?m:ss":
    default:
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
      }
      return "".concat(minutes, ":").concat(pad(seconds));
  }
};

// node_modules/react-timecode/es/Timecode.js
var _excluded = ["as", "component", "format", "postfix", "prefix", "time"];
var Timecode = (0, import_react.forwardRef)(function(_ref, ref) {
  var _ref$as = _ref.as, asProp = _ref$as === void 0 ? "span" : _ref$as, component = _ref.component, _ref$format = _ref.format, format = _ref$format === void 0 ? "H:?m:ss" : _ref$format, _ref$postfix = _ref.postfix, postfix = _ref$postfix === void 0 ? "" : _ref$postfix, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? "" : _ref$prefix, _ref$time = _ref.time, time = _ref$time === void 0 ? 0 : _ref$time, rest = _objectWithoutProperties(_ref, _excluded);
  var timecode = (0, import_react.useMemo)(function() {
    return formatTimecode({
      format,
      time
    });
  }, [format, time]);
  var Component = component || asProp;
  return import_react.default.createElement(Component, _extends({}, es_default(rest), {
    ref
  }), "".concat(prefix).concat(timecode).concat(postfix));
});
export {
  Timecode,
  Timecode as default,
  formatMilliseconds,
  formatTimecode,
  pad,
  parseTime
};
//# sourceMappingURL=react-timecode.js.map
