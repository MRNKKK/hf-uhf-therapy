// node_modules/clean-react-props/es/constants.js
var HTMLProps = [
  "accept",
  "acceptCharset",
  "accessKey",
  "action",
  "allowFullScreen",
  "allowTransparency",
  // ?
  "alt",
  "async",
  "autoComplete",
  "autoFocus",
  "autoPlay",
  "capture",
  "cellPadding",
  "cellSpacing",
  "challenge",
  "charSet",
  "checked",
  "cite",
  "classID",
  "className",
  "colSpan",
  "cols",
  "content",
  "contentEditable",
  "contextMenu",
  "controls",
  "controlsList",
  "coords",
  "crossOrigin",
  "data",
  "dateTime",
  "default",
  "defer",
  "dir",
  "disabled",
  "download",
  "draggable",
  "encType",
  "form",
  "formAction",
  "formEncType",
  "formMethod",
  "formNoValidate",
  "formTarget",
  "frameBorder",
  "headers",
  "height",
  "hidden",
  "high",
  "href",
  "hrefLang",
  "htmlFor",
  "httpEquiv",
  "icon",
  "id",
  "inputMode",
  "integrity",
  "is",
  "keyParams",
  "keyType",
  "kind",
  "label",
  "lang",
  "list",
  "loop",
  "low",
  "manifest",
  "marginHeight",
  "marginWidth",
  "max",
  "maxLength",
  "media",
  "mediaGroup",
  "method",
  "min",
  "minLength",
  "multiple",
  "muted",
  "name",
  "noValidate",
  "nonce",
  "open",
  "optimum",
  "pattern",
  "placeholder",
  "poster",
  "preload",
  "profile",
  "radioGroup",
  "readOnly",
  "rel",
  "required",
  "reversed",
  "role",
  "rowSpan",
  "rows",
  "sandbox",
  "scope",
  "scoped",
  "scrolling",
  "seamless",
  "selected",
  "shape",
  "size",
  "sizes",
  "span",
  "spellCheck",
  "src",
  "srcDoc",
  "srcLang",
  "srcSet",
  "start",
  "step",
  "style",
  "summary",
  "tabIndex",
  "target",
  "title",
  "type",
  "useMap",
  "value",
  "width",
  "wmode",
  "wrap"
];
var RDFProps = ["about", "datatype", "inlist", "prefix", "property", "resource", "typeof", "vocab"];
var ValidEvents = [
  // Clipboard Events
  "onCopy",
  "onCut",
  "onPaste",
  // Composition Events
  "onCompositionEnd",
  "onCompositionStart",
  "onCompositionUpdate",
  // Keyboard Events
  "onKeyDown",
  "onKeyPress",
  "onKeyUp",
  // Focus Events
  "onFocus",
  "onBlur",
  // Form Events
  "onChange",
  "onInput",
  "onInvalid",
  "onReset",
  "onSubmit",
  // Mouse Events
  "onClick",
  "onContextMenu",
  "onDoubleClick",
  "onDrag",
  "onDragEnd",
  "onDragEnter",
  "onDragExit",
  "onDragLeave",
  "onDragOver",
  "onDragStart",
  "onDrop",
  "onMouseDown",
  "onMouseEnter",
  "onMouseLeave",
  "onMouseMove",
  "onMouseOut",
  "onMouseOver",
  "onMouseUp",
  // Pointer Events
  "onPointerDown",
  "onPointerMove",
  "onPointerUp",
  "onPointerCancel",
  "onGotPointerCapture",
  "onLostPointerCapture",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut",
  // Selection Events
  "onSelect",
  // Touch Events
  "onTouchCancel",
  "onTouchEnd",
  "onTouchMove",
  "onTouchStart",
  // UI Events
  "onScroll",
  // Wheel Events
  "onWheel",
  // Media Events
  "onAbort",
  "onCanPlay",
  "onCanPlayThrough",
  "onDurationChange",
  "onEmptied",
  "onEncrypted",
  "onEnded",
  "onError",
  "onLoadedData",
  "onLoadedMetadata",
  "onLoadStart",
  "onPause",
  "onPlay",
  "onPlaying",
  "onProgress",
  "onRateChange",
  "onSeeked",
  "onSeeking",
  "onStalled",
  "onSuspend",
  "onTimeUpdate",
  "onVolumeChange",
  "onWaiting",
  // Image Events
  "onLoad",
  "onError",
  // Animation Events
  "onAnimationStart",
  "onAnimationEnd",
  "onAnimationIteration",
  // Transition Events
  "onTransitionEnd",
  // Other Events
  "onToggle"
];

// node_modules/clean-react-props/es/index.js
var DataRegex = /data-([a-zA-Z0-9\-]*)/;
var AriaRegex = /aria-([a-zA-Z0-9\-]*)/;
var cleanProps = function cleanProps2(props, excludes, customAttributes) {
  if (props === void 0) {
    props = {};
  }
  if (excludes === void 0) {
    excludes = [];
  }
  if (customAttributes === void 0) {
    customAttributes = [];
  }
  var returnProps = Object.assign({}, props);
  var validProps = Object.keys(returnProps).filter(function(key) {
    if (excludes.indexOf(key) !== -1) {
      return false;
    }
    if (customAttributes.indexOf(key) > -1) {
      return true;
    }
    if (HTMLProps.indexOf(key) !== -1) {
      return true;
    }
    if (RDFProps.indexOf(key) !== -1) {
      return true;
    }
    if (DataRegex.test(key)) {
      return true;
    }
    if (AriaRegex.test(key)) {
      return true;
    }
    if (ValidEvents.indexOf(key) !== -1) {
      return true;
    }
    return false;
  });
  Object.keys(returnProps).forEach(function(key) {
    if (validProps.indexOf(key) === -1) {
      delete returnProps[key];
    }
  });
  return returnProps;
};
var es_default = cleanProps;

export {
  es_default
};
//# sourceMappingURL=chunk-PTPDQCAB.js.map
