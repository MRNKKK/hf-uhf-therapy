var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;

/**
 * parseTime
 *
 * @param {Number} time
 * @returns {{ hours: Number, minutes: Number, seconds: Number, milliseconds: Number }}}
 */
export var parseTime = function parseTime(time) {
  var milliseconds = time;
  var hours = milliseconds >= HOUR ? Math.floor(milliseconds / HOUR) : 0;
  if (hours) {
    milliseconds -= hours * HOUR;
  }
  var minutes = milliseconds >= MINUTE ? Math.floor(milliseconds / MINUTE) : 0;
  if (minutes) {
    milliseconds -= minutes * MINUTE;
  }
  var seconds = milliseconds >= SECOND ? Math.floor(milliseconds / SECOND) : 0;
  if (seconds) {
    milliseconds -= seconds * SECOND;
  }
  return {
    hours: hours,
    minutes: minutes,
    seconds: seconds,
    milliseconds: milliseconds
  };
};

/**
 * pad
 *
 * @param {Number} number
 * @param {Number} length
 * @returns {String}
 */
export var pad = function pad(number) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var numberLength = number.toString().length;
  if (numberLength < length) {
    var diff = length - numberLength;
    var padding = '';
    while (padding.length < diff) {
      padding += '0';
    }
    return "".concat(padding).concat(number);
  }
  return "".concat(number);
};

/**
 * formatMilliseconds
 *
 * @param {Number} milliseconds
 * @param {Number} length
 * @returns {String}
 */
export var formatMilliseconds = function formatMilliseconds(milliseconds) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
  return pad((milliseconds / 1000).toFixed(length) * 1000, length);
};

/**
 * formatTimecode
 *
 * @param {Object} options
 * @param {String} options.format
 * @param {Number} options.time
 * @returns {String}
 */
export var formatTimecode = function formatTimecode(_ref) {
  var format = _ref.format,
    time = _ref.time;
  var _parseTime = parseTime(time),
    hours = _parseTime.hours,
    minutes = _parseTime.minutes,
    seconds = _parseTime.seconds,
    milliseconds = _parseTime.milliseconds;
  switch (format) {
    case 'HH:mm:ss.SSS':
      return "".concat(pad(hours), ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case 'H:mm:ss.SSS':
      return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case 'H:?mm:ss.SSS':
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
      }
      return "".concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case 'H:?m:ss.SSS':
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
      }
      return "".concat(minutes, ":").concat(pad(seconds), ".").concat(formatMilliseconds(milliseconds));
    case 'HH:mm:ss':
      return "".concat(pad(hours), ":").concat(pad(minutes), ":").concat(pad(seconds));
    case 'H:mm:ss':
      return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
    case 'H:?mm:ss':
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
      }
      return "".concat(pad(minutes), ":").concat(pad(seconds));
    case 'H:mm':
      return "".concat(hours, ":").concat(pad(minutes));
    case 's.SSS':
      return "".concat(seconds, ".").concat(formatMilliseconds(milliseconds));
    case 's.SS':
      return "".concat(seconds, ".").concat(formatMilliseconds(milliseconds, 2));
    case 'mm:ss':
      return "".concat(pad(minutes + hours * 60), ":").concat(pad(seconds));
    case 'H:?m:ss':
    default:
      if (hours) {
        return "".concat(hours, ":").concat(pad(minutes), ":").concat(pad(seconds));
      }
      return "".concat(minutes, ":").concat(pad(seconds));
  }
};