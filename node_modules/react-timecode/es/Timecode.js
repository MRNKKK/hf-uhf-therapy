import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "component", "format", "postfix", "prefix", "time"];
import React, { forwardRef, useMemo } from 'react';
import cleanReactProps from 'clean-react-props';
import { formatTimecode } from './utils';

/**
 * Timecode - React Component
 *
 * @param {Object} props
 * @param {String} [props.as='span'] - HTML element to render
 * @param {String} [props.component] - HTML element to render [DEPRECATED
 * @param {String} [props.format='H:?m:ss'] - Timecode format
 * @param {String} [props.postfix=''] - Postfix to append to timecode
 * @param {String} [props.prefix=''] - Prefix to prepend to timecode
 * @param {Number} [props.time=0] - Time in milliseconds
 * @param {Object} [rest] - Additional props to pass to HTML element
 * @param {React.Ref} [ref] - React ref
 * @returns {React.ReactElement}
 */
export var Timecode = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
    asProp = _ref$as === void 0 ? 'span' : _ref$as,
    component = _ref.component,
    _ref$format = _ref.format,
    format = _ref$format === void 0 ? 'H:?m:ss' : _ref$format,
    _ref$postfix = _ref.postfix,
    postfix = _ref$postfix === void 0 ? '' : _ref$postfix,
    _ref$prefix = _ref.prefix,
    prefix = _ref$prefix === void 0 ? '' : _ref$prefix,
    _ref$time = _ref.time,
    time = _ref$time === void 0 ? 0 : _ref$time,
    rest = _objectWithoutProperties(_ref, _excluded);
  var timecode = useMemo(function () {
    return formatTimecode({
      format: format,
      time: time
    });
  }, [format, time]);
  var Component = component || asProp;
  return /*#__PURE__*/React.createElement(Component, _extends({}, cleanReactProps(rest), {
    ref: ref
  }), "".concat(prefix).concat(timecode).concat(postfix));
});